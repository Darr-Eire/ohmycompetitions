// src/lib/loadPiSdk.js
// Back-compat loader that ensures the Pi SDK script is present, then returns window.Pi.
// New code can import { getPi } from '@/lib/piClient' directly.

let loadingPromise = null;
const SCRIPT_SRC = 'https://sdk.minepi.com/pi-sdk.js';

/** Wait for window.Pi to appear after script injection. */
function waitForPi(maxMs = 5000, interval = 100) {
  return new Promise((resolve, reject) => {
    const start = Date.now();
    const iv = setInterval(() => {
      if (typeof window !== 'undefined' && window.Pi) {
        clearInterval(iv);
        resolve(window.Pi);
      } else if (Date.now() - start >= maxMs) {
        clearInterval(iv);
        reject(new Error('Pi object missing after load'));
      }
    }, interval);
  });
}

/**
 * Dynamically load the Pi SDK script if not already loaded.
 * Ensures single load and returns the initialized window.Pi object.
 * @param {(ready:boolean)=>void} [callback]
 * @returns {Promise<typeof window.Pi|null>}
 */
export async function loadPiSdk(callback) {
  if (typeof window === 'undefined') return null;

  // Already available
  if (window.Pi) {
    try {
      // Initialize once (safe if called repeatedly)
      window.Pi.init({ version: '2.0', network: process.env.NEXT_PUBLIC_PI_ENV || 'Pi Testnet' });
    } catch (_) 
    callback?.(true);
    return window.Pi;
  }

  // Already loading
  if (loadingPromise) {
    const pi = await loadingPromise;
    try {
      pi.init({ version: '2.0', network: process.env.NEXT_PUBLIC_PI_ENV || 'Pi Testnet' });
    } catch (_) {}
    callback?.(true);
    return pi;
  }

  // Start loading
  loadingPromise = new Promise((resolve, reject) => {
    // If script tag already present, just wait
    if (document.querySelector(`script[src="${SCRIPT_SRC}"]`)) {
      waitForPi()
        .then(resolve)
        .catch(reject);
      return;
    }

    const s = document.createElement('script');
    s.src = SCRIPT_SRC;
    s.async = true;
    s.onload = () => {
      waitForPi().then(resolve).catch(reject);
    };
    s.onerror = (err) => reject(new Error('Failed to load Pi SDK script: ' + (err?.message || 'unknown error')));
    document.head.appendChild(s);
  });

  try {
    const pi = await loadingPromise;
    try {
      pi.init({ version: '2.0', network: process.env.NEXT_PUBLIC_PI_ENV || 'Pi Testnet' });
    } catch (_) {}
    callback?.(true);
    return pi;
  } catch (e) {
    callback?.(false);
    throw e;
  }
}

// Default export for legacy: import loadPiSdk from 'lib/loadPiSdk'
export default loadPiSdk;
