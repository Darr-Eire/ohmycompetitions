

/** Detect Pi Browser */
export const isPiBrowser = () =>
  typeof navigator !== 'undefined' && /PiBrowser/i.test(navigator.userAgent);

/** Wait until the Pi SDK is ready (createPayment present) */
async function waitForPi(maxMs = 6000) {
  const start = Date.now();
  while (Date.now() - start < maxMs) {
    if (typeof window !== 'undefined' && window.Pi && typeof window.Pi.createPayment === 'function') {
      return window.Pi;
    }
    await new Promise(r => setTimeout(r, 200));
  }
  throw new Error('Pi SDK not available yet');
}

/** Use relative base URL in prod; allow ngrok in dev */
function getBaseUrl() {
  if (typeof window === 'undefined') return '';
  if (window.location.origin.includes('ngrok')) return window.location.origin;
  return ''; // same-origin
}

/** Create a Pi payment */
export async function createPiPayment({ competitionSlug, amount, memo }) {
  const Pi = await waitForPi();

  return new Promise((resolve, reject) => {
    const paymentData = {
      amount: Number(parseFloat(amount).toFixed(2)),
      memo: memo || `Competition entry: ${competitionSlug}`,
      metadata: { type: 'competition_entry', competitionSlug, timestamp: Date.now() },
    };

    Pi.createPayment(paymentData, {
      onReadyForServerApproval: async (paymentId) => {
        try {
          const res = await fetch(`${getBaseUrl()}/api/pi/approve-payment`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ paymentId, slug: competitionSlug, amount: paymentData.amount }),
          });
          if (!res.ok) throw new Error(await res.text());
        } catch (err) {
          console.error('Approval error:', err);
          // Let SDK continue; do not reject here.
        }
      },
      onReadyForServerCompletion: async (paymentId, txid) => {
        try {
          const res = await fetch(`${getBaseUrl()}/api/pi/complete-payment`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ paymentId, txid, slug: competitionSlug, amount: paymentData.amount }),
          });
          if (!res.ok) throw new Error(await res.text());
          resolve(await res.json());
        } catch (err) {
          console.error('Completion error:', err);
          reject(err);
        }
      },
      onCancel: (paymentId) => reject(new Error('Payment cancelled: ' + paymentId)),
      onError: (error, payment) => reject(error instanceof Error ? error : new Error('Payment error')),
    });
  });
}

/** Auth-time incomplete payments handler (call from Pi.authenticate callback) */
export async function handleIncompletePayment(payment, competitionSlug) {
  const res = await fetch(`${getBaseUrl()}/api/pi/incomplete`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ payment, slug: competitionSlug || null }),
  });
  return res.json().catch(() => ({}));
}
